BACKEND - Programming
These can be done in any language you're comfortable with

1. Give a regular expression that detects hexadecimal numbers in a text.
For example, ‘0x0f4’, ‘0acdadecf822eeff32aca5830e438cb54aa722e3’, ‘8BADF00D’ should be detected.

> // Language utilisé: Javascript

----------------------

const regex = RegExp('0x[A-Fa-f0-9]+|[A-Fa-f0-9]+')

const arr = ["0x0f4", "0acdadecf822eeff32aca5830e438cb54aa722e3", "8BADF00D", "fbdbfbflkbdvlk56jdvlkdvddvdvzr"]

for(let i = 0; i < arr.length; i++) {
	if (arr[i].match(regex) == arr[i]) {
		console.log("This is an hexadecimal numbers.")
	} else {
		console.log("This is not an hexadecimal numbers.")
	}
}

----------------------

// Answers from the terminal

This is an hexadecimal numbers.
This is an hexadecimal numbers.
This is an hexadecimal numbers.
This is not an hexadecimal numbers.


2.Here is the pseudo code of a function that is defined recursively:
-  f(0) = 1;
-  f(1) = 3;
-  f(n)= 3 * f(n-1) - f(n-2);
Provide an implementation for ‘f’. Bonus points for a non recursive implementation.

> // Recursive implementation

----------------------

const f = n => {
	if(n <= 0) {
		return 1
	} else if (n === 1) {
		return 3
	} else {
		return 3 * f(n-1) - f(n-2)
	}
}

console.log(f(1)) 
//Answer from the terminal  
// 3

console.log(f(2)) 
// //Answer from the terminal  
// 3 * f(1) - f(0) = 3 * 3 - 1 = 8

console.log(f(3))
//Answer from the terminal  
// 3 * f(2) - f(1) = 3 * 8 - 3 = 21

----------------------

BACKEND - MySQL

1. Write a CREATE TABLE query for a table storing information on users. It will store:
  - id,
  - firstname,
  - lastname,
  - gender,
  - email,
  - created_at

> CREATE TABLE users (
    id INT NOT NULL AUTO_INCREMENT,
    firstname varchar(100),
    lastname varchar(100),
    gender varchar(1),
    email varchar(100),
    created_at DATE
);

2. Write a query on the previous table that lists the 10 most recently added users.

> SELECT * 
  FROM 'users'
  ORDER_BY 'created_at' DESC
  LIMIT 10;

GENERAL - Creativity
Si vous êtes Français, vous pouvez répondre en Français.

1. Describe the color yellow to someone who is blind

> Par définition, une personne aveugle est privé de sa vue (obvious).
Ainsi, si je devais décrire le jaune à une personne aveugle; je pense que j'utiliserais 
les 4 autres sens qui sont: l'Ouïe, l'odorat, le goût et le toucher.

Je lui dirai donc que:

"Si le jaune était un son, il aurait la tonalité d'un oeuf qui tombe dans mon plat!
 Si je jaune avait une texture, il serait doux comme le beurre!
 Si le jaune avait un goût, il serait acide comme un citron!
 Si le jaune avait une odeur, il sentirait la gourmandise!
 Et enfin, le mélange de mes 4 sens est une TARTE AU CITRON."

3. Describe the data model you’d use for a Battleship game. What are the key objects? How will your code use them?

> // Battleship game - Data model

Joueur
- Id 'Number'
- prenom 'String'
- date_inscription 'Date'
- email 'String'
- mot_de_passe 'String'
- victoire 'Number'

Plateau
- row 'String' // One, Two, Three, Four, Five, Six, Seven, Eigth, Nine, Ten
- column 'String' // A, B, C, D, E, F, G, H, I, J

Vaisseau
- Ship_type 'String' // Destroyer, Submarine, Cruiser, Battleship, Carrier
- size 'Number' // 1 à 5
- coulé 'boolean' // Vrai, Faux
- position 'String' // column row

Attaque
- position_attaque 'String' // column row


----------------------

Les principaux éléments que l'on va utiliser pour construire l'application sont Le Joueur, le Plateau
le Vaisseau et l'Attaque.

L'objet Joueur va principalement être utilisé dans le Backend afin de stocker les données de 
l'utilisateur et ces statistiques (Victoire). De plus, les données indiquées vont être utilisés 
dans le système d'authentification. Les joueurs, pourront jouer au jeu uniquement s'ils sont connectés. 
Ensuite, il va également être utile afin de différencier les 2 joueurs de la partie.

Ensuite, l'objet Plateau va nous permettre de modéliser le plateau de jeu afin de placer les
vaisseaux. 

Chaque Vaisseau va donc être placé sur le plateau dans une position bien précise. La size du vaisseau
dépend du type de vaisseau. 

La size du vaisseau baissera à partir du moment ou position_attaque === position.
Si size === 0 alors coulé === True et on perd le vaisseau. 

La partie s'arrête lorsque tous les vaisseaux sont coulés.












